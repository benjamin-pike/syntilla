@keyframes openModal {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

@keyframes closeModal {
    0% {
        opacity: 1;
    }
    100% {
        opacity: 0;
    }
}

.modalContainer{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(10px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 999999;
}

.modalContainer[data-status = 'open'] {
    animation: openModal 500ms ease forwards;
}

.modalContainer[data-status = 'closing'] {
    animation: closeModal 500ms ease forwards;
}

.modalContainer::before{
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(220, 235, 255, 0.025);
    mix-blend-mode: screen;
    z-index: 100;
}

.modal {
    padding: 2.25rem 2.5rem;
    background-color: rgba(0, 0, 0, 0.75);
    box-shadow: 
        0 0 0 1px white,
        0 0 1em black inset,
        0 0 1em rgb( 0 0 0 / 0.1 ),
        0 0 5em rgb( 0 0 0 / 0.15 ),
        0 0 15em rgb( 0 0 0 / 0.25 );
    border-radius: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-direction: column;
    gap: 2rem;
    z-index: 100;
}

.modal > * {
    user-select: none;
}

.modalHeader {
    color: white;
    font-weight: 600;    
    font-size: 1.1rem;
    padding: 0.85rem 1.5rem;
    border-radius: 0.75rem;
    box-shadow:
        0 0 0 0.075rem rgb(255 255 255 / 0.25),
        0 0 0.25em rgb( 200 200 255 / 0.05 ),
        0 0 1em rgb( 200 200 255 / 0.1 ),
        0 0 2em rgb( 200 200 255 / 0.15 );
    user-select: none;
}

/* .modalHeader::after {
    content: '';
    display: block;
    width: 100%;
    height: 1px;
    background-color: #30363C;
    margin-top: 0.5rem;
} */

.modalBody {
    display: grid;
    grid-template-columns: auto 1fr;
    width: 100%;
    grid-column-gap: 2rem;
    grid-row-gap: 1rem;
}

.settingsLabel {
    color: white;
    font-weight: 500;
    font-size: 1rem;
    display: flex;
    align-items: center;
    white-space: pre;
    justify-content: flex-start;
}

.settingsSelector{
    display: flex;
    align-items: center;
    justify-content: flex-end;
}

.closeButton {
    cursor: pointer;
    background-color: var(--bg-100);
    outline: none;
    box-shadow: 0 0 0 1.5px #30363C;
    border: none;
    color: white;
    font-weight: 500;
    text-align: center;
    font-size: 1em;
    width: 2.5em;
    aspect-ratio: 1;
    border-radius: 0.5em;
    transition: 
        right 500ms ease,
        transform 500ms ease,
        box-shadow 200ms ease,
        font-size 200ms ease, 
        width 200ms ease;
}

.closeButton:hover {
    box-shadow:
        0 0 0 1.5px rgb( 255 255 255 / 0.5 ),
        0 0 1em black inset,
        0 0 1em rgb( 200 200 255 / 0.15 ),
        0 0 5em rgb( 200 200 255 / 0.05 ),
        0 0 10em rgb( 200 200 255 / 0.025 );
}

.toggleContainer {
    position: relative;
    width: 2.5rem;
    height: 1.5rem;
}

.toggleContainer input[type="checkbox"] {
    display: none;
    opacity: 0;
}

.toggleContainer input[type="checkbox"] + label {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 100vmax;
    box-shadow: 0 0 0 1px #30363C;
    cursor: pointer;
    transition: box-shadow 200ms ease;
}

.toggleContainer input[type="checkbox"] + label:before {
    --padding: 0.25rem;
    content: "";
    position: absolute;
    top: var(--padding);
    bottom: var(--padding);
    left: var(--padding);
    height: calc(100% - (2 * var(--padding)));
    aspect-ratio: 1;
    box-shadow: 0 0 0 1px #30363C;
    border-radius: 100%;
    transition: 
        background-color 200ms ease, 
        transform 200ms ease, 
        left 200ms ease,
        box-shadow 200ms ease;
}

.toggleContainer input[type="checkbox"]:checked + label {
    box-shadow: 0 0 0 1px white;
}

.toggleContainer input[type="checkbox"]:checked + label:before {
    right: var(--padding);
    left: 100%;
    background-color: white;
    box-shadow: 0 0 0 0 #30363C;
    transform: translateX(calc(-100% - var(--padding)));
}
  